#!/usr/bin/env bash
#
# lxdbackup
# Backup up all remote lxd instances using lxc copy
# Note: the backed-up copy is deleted before copy

set -o nounset
set -o errexit
set -o pipefail

LOGLEVEL=${LOGLEVEL:-INFO}

# Logging functions
# shellcheck source=/dev/null
source "$(dirname "$0")"/functions/log.sh

# global variables
_lxc=$(command -v lxc)
_snapshot=lxdbackup

# Cleanup when exiting unclean
trap "cleanup; echo 'Unclean exit'" INT SIGHUP SIGINT SIGTERM

# functions
cleanup () {
  : ;
}

# using echo instead of real commands for dryrun
dryrun(){ _lxc="echo DRYRUN:${_lxc}"; }

usage() {
  cat <<EOF >&2
$0: <flags> 
Allowed flags are:
-l|--log=<CRITICAL|ERROR|WARN|NOTIFY|INFO|DEBUG> default WARN
-n|--dry-run                                    print commands as if they would be executed
--help                                          this message
EOF
}

params="$(getopt -o l:n --long dry-run,log:,help --name "$0" -- "$@")"
eval set -- "$params"

while true ; do
  case "$1" in
    -l|--log)     enumLogLevel "$2"; export LOGLEVEL="$2"; shift 2;;
    -n|--dry-run) dryrun; shift;;
    --help)       usage; exit 0;;
    --)           shift; break ;;
    *)            log_critical "Not implemented: $1"; usage; exit 1;;
  esac
done

if [[ $# != 0 ]] ; then
  log_critical "Command line arguments found: $*"
  usage
  exit 1
fi

#TODO check these restored functions
# delete snapshot if it exists
delete_snapshot() {
  local container="$1"
  local snapname="$2"
  local snap="${container}/${snapname}"

  log_debug "delete_snapshot ${container} ${snapname}"

  # delete snapshot if it exists
  if lxc info "${container}" | grep -q "^  ${snapname} "; then
    log_info "Attempting to delete snapshot '${snap}'"
    if ! ${_lxc} delete "${snap}" ; then
      log_error "FAILED to delete snapshot ${snap}"
      return 1
    fi
    log_info "Successfully deleted snapshot ${snap}"
  fi
  return 0
}

# Create snapshot making sure deleted first
create_snapshot() {
  local container="$1"
  local snapname="$2"
  local snap="${container}/${snapname}"

  log_debug "create_snapshot ${container} ${snapname}"

  delete_snapshot "${container}" "${snapname}" || return 1

  log_info "Attempting to create snapshot '${snap}'"
  if ! ${_lxc} snapshot "${snap}" ; then
    log_error "FAILED to create snapshot ${snap}"
    return 2
  fi
  log_info "Successfully created snapshot ${snap}"

  return 0
}


# Copy container 
copy_container() {
  local source="$1"
  local container="$2"
  local pool="$3"
  local copy_args="--stateless --config=boot.autostart=false --storage ${pool}"

  log_info "Attempting to copy '${source}'"

  # Check if container exists on local and delete if it does
  if [[ -n $(lxc list "^${container}\$" -c n --format=csv) ]] ; then
    log_debug "${container} exists on local:, delete before copy"

    if ! ${_lxc} delete "${container}" ; then
      log_error "FAILED to copy ${container}, ABORTING BACKUP"
      return 1
    else
      log_debug "deleted copy ${container}"
    fi
  fi
  
  log_debug "${_lxc} copy ${source} ${container} ${copy_args}"

  # shellcheck disable=SC2086
  if ! ${_lxc} copy "${source}" "${container}" ${copy_args}; then
    log_error "FAILED to copy ${source}, ABORTING BACKUP"
    return 1
  fi  
  log_debug "Success -- copied ${source}"
  return 0
}

# Get list of remotes excluding local
remote_list() {
  lxc remote list | grep -v simplestreams | awk '/lxd/{print $2}' | grep -v local ;
}

# Get list of running containers
container_list() {
  lxc list -c ns "${1}:" | awk '!/NAME/{ if ( $4 == "RUNNING" ) print $2}';
}

declare -i _remote_count
declare -i _backedup_count=0
declare -i _container_count=0
declare -a _remotes

# Get the first pool on the local lxd.
# This is explicitly set on the copy command
_pool=$(lxc storage list --format=csv | cut -d ',' -f 1 | head -1)
if [[ -z ${_pool} ]] ; then
  log_critical "FAILED to get local storage pool"
  exit 1
fi

mapfile -t _remotes < <(remote_list)
log_debug "List of remotes to backup: ${_remotes[*]}"

# For each remote
for _remote in "${_remotes[@]}"; do
  log_info "Backing up remote ${_remote}"

  declare -a _containers
  _remote_count=0

  mapfile -t _containers < <(container_list "${_remote}")
  log_debug "List of containers to backup: ${_containers[*]}"
  _container_count+=${#_containers[@]}

  # For each container on this remote
  for _container in "${_containers[@]}"; do
    log_info "Backing up container ${_container}"

    create_snapshot "${_remote}:${_container}" ${_snapshot} || continue

    copy_container "${_remote}:${_container}/${_snapshot}" "${_container}-backup" "${_pool}" || continue

    delete_snapshot "${_remote}:${_container}" "${_snapshot}" || continue
    _remote_count+=1
  done

  log_info "Backup of ${_remote} complete, $_remote_count containers backed up"
  _backedup_count+=${_remote_count}

done
log_info "lxdbackup complete, $_backedup_count containers backed up out of $_container_count"

exit $(( _container_count - _backedup_count ))
